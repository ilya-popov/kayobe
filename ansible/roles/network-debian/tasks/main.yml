---
- import_role:
    name: ahuffman.resolv
  when: resolv_is_managed | bool
  become: True

- name: Ensure IP routing tables are defined for iproute2
  become: true
  blockinfile:
    dest: /etc/iproute2/rt_tables
    block: |
      {% for table in network_route_tables %}
      {{ table.id }} {{ table.name }}
      {% endfor %}

- name: Remove netplan.io packages
  become: true
  package:
    name:
      - libnetplan0
      - netplan.io
    state: absent
  notify:
    - Remove netplan systemd-networkd configuration

# NOTE(mgoddard): The above needs to fire before any restart of
# systemd-networkd, to avoid shadowing of our configuration files by those
# provided by netplan.
- meta: flush_handlers

- name: Configure systemd-networkd
  import_role:
    name: stackhpc.systemd_networkd
  vars:
    systemd_networkd_link: "{{ network_interfaces | networkd_links }}"
    systemd_networkd_netdev: "{{ network_interfaces | networkd_netdevs }}"
    systemd_networkd_network: "{{ network_interfaces | networkd_networks }}"
    systemd_networkd_apply_config: true
    systemd_networkd_enable_resolved: false
    systemd_networkd_symlink_resolv_conf: false
    systemd_networkd_cleanup: true
    systemd_networkd_cleanup_patterns:
      - "{{ networkd_prefix }}*"

- block:

    # NOTE(mmalchuk): Because we can cleanup an old management interface we do it
    # asynchronously. Also we need to restart systemd-networkd service together
    # with cleanup in one task even if service restart is postponed to the end of
    # this play.
    - name: Cleanup oprphan system interfaces asynchronously
      shell: |
        systemctl restart systemd-networkd.service || true
        ip link delete {{ item }} || ip address delete {{ interfaces_system[item] }} dev {{ item }} || true
      loop: "{{ interfaces_cleanup }}"
      async: 1
      poll: 0
      register: cleanup_interfaces_async

    - name: Check on an async cleanup tasks are finished
      async_status:
        jid: "{{ cleanup_result.ansible_job_id }}"
        mode: "status"
      loop: "{{ cleanup_interfaces_async.results }}"
      loop_control:
        loop_var: "cleanup_result"
      register: cleanup_job_result
      until: cleanup_job_result.finished
      retries: 3
      delay: 1

    - name: Cleanup async job cache
      async_status:
        jid: "{{ cleanup_result.ansible_job_id }}"
        mode: "cleanup"
      loop: "{{ cleanup_interfaces_async.results }}"
      loop_control:
        loop_var: "cleanup_result"

  become: true
  when: interfaces_cleanup | default([]) | length > 0
